NET
scheme testNET =
extend NET with 
class
  value 
  	stops : StopId-set = {"A", "B", "C", "D"},
    net : Net = addConnection("B", "C", 4, 12, 3, 
    				addConnection("A", "B", 2, 10, 3, 
    					addConnection("B", "D", 4, 7, 2, 
    						insertStop("D", 2, 
    							insertStop("C", 2, 
    								insertStop("B", 3,  
	    								insertStop("A", 2, empty)
		    						)
    							)
    						)
						)
					)
				)
  test_case
  		[netIsWellformed] 
  			isWellformed(net),
  		[insertDuplicateStop] 
  			insertStop("A", 2, net) = net,
  		[insertNewStopAltersNet] 
  			insertStop("E", 4, net) ~= net,
  		[equalCapacityOfBothDirectionsInConnection] 
  			capacity("A", "B", net) = capacity("B", "A", net),
  		[equalHeadwayOfBothDirectionsInConnection]
  			minHeadway("A", "B", net) = minHeadway("B", "A", net), 
  		[equalDrivingTimeOfBothDirectionsInConnection] 
  			minDrivingTime("A", "B", net) = minDrivingTime("B", "A", net),
  		[areDirectlyConnected]
  			areDirectlyConnected("A", "B", net) = areDirectlyConnected("B", "A", net),
  		[areDirectlyConnectedWithStopsThatAreNotConnected]
  			areDirectlyConnected("A", "C", net) = false,
  		[stopIsInNetwork]
  			(all s1 : StopId :- s1 isin stops => isIn(s1, net))
 end