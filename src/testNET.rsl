NET
scheme testNET =
extend NET with 
class
  value 
  	stops : StopId-set = {"A", "B", "C", "D"},
    net : Net = addConnection("B", "C", 4, 3, 12, 
    				addConnection("A", "B", 2, 3, 10,  
    					addConnection("B", "D", 4, 2, 7, 
    						insertStop("D", 2, 
    							insertStop("C", 2, 
    								insertStop("B", 3,  
	    								insertStop("A", 2, empty)
		    						)
    							)
    						)
						)
					)
				)
  test_case
  		-- check whether the wellformed net is evaluated as being wellformed
  		[netIsWellformed] isWellformed(net),
  				
  		-- tries to add a connection with a stop that is not defined in the network - this should yield a illformed net.
  		[netIsNotWellformed] isWellformed(addConnection("D", "E", 2, 3, 9, net)) = false,
  		
  		-- tries to add a connection with two identical stops - this should yield a illformed net.
  		[netIsNotWellformedWhenAddingAConnectionToSelf] isWellformed(addConnection("A", "A", 2, 4, 19, net)) = false,
  		
  		-- tries to insert a stop that already exists - this should not alter the net
  		[insertDuplicateStop] insertStop("A", 2, net) = net,
  			
  		-- tries to insert a new stop - this should alter the net
  		[insertNewStopAltersNet] insertStop("E", 4, net) ~= net,
  			
  		-- test whether the capacity of a connection is equal for both directions as it should be
  		[equalCapacityOfBothDirectionsInConnection] capacity("A", "B", net) = capacity("B", "A", net),
  			
  		-- test whether the headway of a connection is equal for both directions as it should be
  		[equalHeadwayOfBothDirectionsInConnection] minHeadway("A", "B", net) = minHeadway("B", "A", net),
  			
  		-- test whether the driving time of a connection is equal for both directions as it should be
  		[equalDrivingTimeOfBothDirectionsInConnection] minDrivingTime("A", "B", net) = minDrivingTime("B", "A", net),
  			
  		-- test whether two stops are directly connected
  		[areDirectlyConnected] areDirectlyConnected("A", "B", net), 
  			
  		-- test whether two stops (that are not connected) are directly connected
  		[areDirectlyConnectedWithStopsThatAreNotConnected] areDirectlyConnected("A", "C", net) = false,
  			
  		-- checks whether all the stops are in the net
  		[stopIsInNetwork] (all s1 : StopId :- s1 isin stops => isIn(s1, net))
 end