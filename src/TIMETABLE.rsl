NET
scheme TIMETABLE = extend NET with
class
	type
	    TimeTable = TramId -m-> TimeSlot-list, -- time tables
	    TimeSlot = StopId >< Time >< Time,	-- stopId, arrival, departure
	    TramId = Text -- tram names

    value /* generators */
		-- the empty timetable
		empty: TimeTable = [],
		
		-- add an empty plan for a new tram to time table
		addTram: TramId >< TimeTable -> TimeTable
		addTram(id, table) is table !! [id +> <..>],
		
		-- add a stop with arrival time and departure time to the plan for a given tram
		addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
		addStop(tId, sId, arrival, depature, table) is 
		let newPlan = table(tId) ^ <.(sId, arrival, depature).> in table !! [tId +> newPlan] end
 
	value /* observers */
		-- check whether a tram with a given name exists in a given time table
		isIn : TramId >< TimeTable -> Bool
		isIn(id, table) is id isin dom table

     -- you can add more observers here
 
  value /* predicates to check time tables */   
		isWellformed : TimeTable >< Net -> Bool
		isWellformed(table, net) is checkTramTimeTable(table, net) /\ isNotEmpty(table) 
			/\ getTrams(table, net) /\ checkStationCapacity(table, net),
		
		-- checks that every stop in the time table exists in the tram net
		checkTramTimeTable: TimeTable >< Net -> Bool
		checkTramTimeTable(table, net) is
			let
				(stops, connection) = net				
			in
				(all tramId : TramId :- tramId isin table =>
					let 
						stops = table(tramId)
					in
						(all (s, dep, arr) : StopId >< Time >< Time :- (s, dep, arr) isin stops =>
							(exists (s1, s2) : StopId >< StopId :- (s1, s2) isin connection /\
								(s = s1 \/ s = s2))
						)
					end
				)
			end,
		
		-- checks that the TimeTable doesn't have empty lists
		isNotEmpty : TimeTable -> Bool
		isNotEmpty(table) is 
			if table = [] then false else
			(all tramId : TramId :- tramId isin table => 
				if table(tramId) = <..> then
					false
				else
					true
				end
			)
				end,
		
		-- Extracts a connection (i.e. two stops) from a TimeSlot
		getTwoStopsFromTram : TimeSlot-list -> (TimeSlot >< TimeSlot)
		getTwoStopsFromTram(tram1) is 
			let
				slot1 = hd tram1,
				slot2 = hd tl tram1
			in
				(slot1, slot2)
			end,
		
		-- goes through all trams
		getTrams : TimeTable >< Net -> Bool
		getTrams(table, net) is
			(all tram : TramId :- tram isin table => checkMinDrivingTime(table(tram), net) /\ checkConnectionsAreValid(table(tram), table, net)),

		-- checks that the time spent between stops upholds the minimum driving time criteria
		checkMinDrivingTime : TimeSlot-list >< Net -> Bool
		checkMinDrivingTime(tram1, net) is 
		if len tram1 < 2 then
			true
		else
			let
				((id1, arr1, dep1), (id2, arr2, dep2)) = getTwoStopsFromTram(tram1),
				dt = arr2 - dep1
			in
				if dt < minDrivingTime(id1, id2, net) then
					false
				else
					checkMinDrivingTime(tl tram1, net)
				end
			end
		end,
	
		-- 
		checkConnectionsAreValid : TimeSlot-list >< TimeTable >< Net -> Bool
		checkConnectionsAreValid(tram, table, net) is 
		if len tram < 2 \/ table = empty then
			true
		else
			let
				slot1 = hd tram,
				slot2 = hd tl tram,
				(id1, arr1, dep1) = slot1,
				(id2, arr2, dep2) = slot2,
				tram = tl tram,
				table = table \ {hd table}
			in
				if checkConnectionCapacity(slot1, slot2, table, net, 1) > capacity(id1, id2, net) \/ 
						checkConnectionHeadway(slot1, slot2, table, net, 0) > 0 then
					false
				else
					checkConnectionsAreValid(tram, table, net)
				end
			end
		end,
	
		-- get amount of concurrent stops at station
		checkConnectionCapacity : TimeSlot >< TimeSlot >< TimeTable >< Net >< Nat -> Nat
		checkConnectionCapacity(time1, time2, table, net, count) is
			if table = [] then
				count
			else
				let 
					tram = hd table,
					(s1, a1, d1) = time1,
					(s2, a2, d2) = time2
				in
					if 
						(all tramId : TramId :- tramId isin table =>
							(exists (s3, a3, d3) : TimeSlot :- (s3, a3, d3) isin table(tramId) /\
								(exists (s4, a4, d4) : TimeSlot :- (s4, a4, d4) isin table(tramId) 
								/\ areDirectlyConnected(s1, s2, net) /\ areDirectlyConnected(s3, s4, net)
									/\ (s1 = s3 /\ s2 = s4)
									 /\ ((a3 <= a2 /\ a2 <= a4) /\ (d1 <= d3 /\ d3 <= a2))
									 /\ checkConnectionsAreValid(net) 
								)
							)
						) then
						checkConnectionCapacity(time1, time2, table \ {tram}, net, count + 1)
					else
						checkConnectionCapacity(time1, time2, table \ {tram}, net, count)
					end
				end
			end,

		checkConnectionHeadway : TimeSlot >< TimeSlot >< TimeTable >< Net >< Nat -> Nat
		checkConnectionHeadway(time1, time2, table, net, count) is
			if table = [] then
				count
			else
				let 
					tram = hd table,
					(s1, a1, d1) = time1,
					(s2, a2, d2) = time2
				in
					if
						(exists tramId : TramId :- tramId isin table \ {tram} /\
							(exists (s3, a3, d3) : TimeSlot :- (s3, a3, d3) isin table(tramId) /\ 
								(exists (s4, a4, d4) : TimeSlot :- (s4, a4, d4) isin table(tramId) /\
									(s1 = s3) /\ (s2 = s4) /\ (s3 ~= s4) /\ (abs(d1 - d3) > minHeadway(s1, s2, net)) /\ (abs(a2 - a4) > minHeadway(s1,s2,net))
								)
							)
						) then
						checkConnectionHeadway(time1, time2, table \ {tram}, net, count + 1)
					else
						checkConnectionHeadway(time1, time2, table \ {tram}, net, count)
					end
				end
			end,

		checkStationCapacity : TimeTable >< Net -> Bool
		checkStationCapacity(table, net) is
			let
				tram = hd table
			in
				(all tramId : TramId :- tramId isin table =>
					(all slot : TimeSlot :- slot isin table(tramId) => 
						(let 
							(s, a, d) = hd table(tram)
						in
							countStationOccupancy((s, a, d), table, 0) <= capacity(s, net)
						end)
					)
				)
			end,
			
		-- get amount of concurrent stops at station
		countStationOccupancy : TimeSlot >< TimeTable >< Nat -> Nat
		countStationOccupancy(time, table, count) is
			if table = [] then
				count
			else
				let 
					tram = hd table,
					(s1, a1, d1) = time
				in
					if 
						(exists tramId : TramId :- tramId isin table /\
							(exists (s2, a2, d2) : TimeSlot :- (s2, a2, d2) isin table(tramId) /\
								(s1 = s2 /\ (a1 <= a2 /\ a2 <= d1) /\ (a2 <= d1 /\ d1 <= d2))
							)
						) then
						countStationOccupancy(time, table \ {tram}, count + 1)
					else
						countStationOccupancy(time, table \ {tram}, count)
					end
				end
			end
end  