scheme NET =
class
  type 
    Net = (StopId -m-> Capacity) >< Connections, -- tram nets
    Headway = Time, -- minimum headways
    DrivingTime = Time, -- minimum driving times
    Time = Nat, -- times in number of minutes
    Capacity = Nat, -- capacities
    StopId = Text,  -- names of stops
    Stop = StopId >< Capacity,
    Connections = StopId >< StopId -m-> (Headway >< Capacity >< DrivingTime)
    
  value /* generators */
    empty :  Net = ([], []) ,  -- the empty net

    -- insert a stop with a given name and capacity 
    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(stopId, capacity, (stops, connections)) is (stops !! [stopId +> capacity], connections),

    -- add a connection between given stops, 
    -- with the given capacity, minimum driving time and minimum headway
    addConnection : StopId >< StopId >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(s1, s2, h, c, d, (stops, connections)) is (stops, connections !! [(s1, s2) +> (h, c, d)] !! [(s2, s1) +> (h, c, d)])
    		
  value /* observers */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
	isIn(sId, (stops, connection)) is sId isin dom stops,
 
    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
    areDirectlyConnected(s1, s2, (stops, conn)) is (s1, s2) isin dom conn,
    
    -- get minimum driving time between two connected stops        
    minHeadway : StopId >< StopId >< Net -~-> Headway
    minHeadway(s1, s2, (stops, connections)) is let (headway, capacity, drivingtime) = connections(s1, s2) in headway end, 

    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
    minDrivingTime(s1, s2, (stops, connections)) is let (headway, capacity, drivingtime) = connections(s1, s2) in drivingtime end, 

    -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity
    capacity(s1, s2, (stops, connections)) is let (headway, capacity, drivingtime) = connections(s1,s2) in capacity end,
 
    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity
    capacity(stopId, (stops, connections)) is stops(stopId)

  value /* predicates to check nets */
    isWellformed : Net -> Bool
    isWellformed(net) is let (stops, connections) = net in
    	stopsInConnectionExistsInNet(net) /\ checkConnectionsAreValid(net)
    	end,
    
    checkConnectionsAreValid : Net -> Bool
    checkConnectionsAreValid(net) is
    let (stops, conn) = net in 
    	(all (s1, s2) : StopId >< StopId :- (s1, s2) isin dom conn => 
    		(exists (s3, s4) : StopId >< StopId :- (s3, s4) isin dom conn /\
    			(s1 = s4 /\ s2 = s3 /\ conn(s1, s2) = conn(s3, s4))
			)
		)
    end,
        
    stopsInConnectionExistsInNet : Net -> Bool
    stopsInConnectionExistsInNet((stops, conn)) is
    (all (s1, s2) : StopId >< StopId :- (s1, s2) isin conn => 
    	s1 isin dom stops /\ s2 isin dom stops
    )
end